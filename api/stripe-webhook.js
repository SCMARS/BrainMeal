/**
 * Vercel Serverless Function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe Webhooks
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
 */

const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
if (!admin.apps.length) {
  try {
    admin.initializeApp({
      credential: admin.credential.cert({
        projectId: process.env.FIREBASE_PROJECT_ID,
        clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      }),
      databaseURL: `https://${process.env.FIREBASE_PROJECT_ID}-default-rtdb.firebaseapp.com`
    });
  } catch (error) {
    console.error('Firebase Admin initialization error:', error);
  }
}

const db = admin.firestore();

export default async function handler(req, res) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  try {
    const stripeEvent = req.body;
    
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ Stripe —Å–æ–±—ã—Ç–∏–µ:', stripeEvent.type);
    console.log('üìä ID —Å–æ–±—ã—Ç–∏—è:', stripeEvent.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook (–≤ production)
    if (process.env.STRIPE_WEBHOOK_SECRET) {
      const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
      const sig = req.headers['stripe-signature'];
      
      try {
        stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
      } catch (err) {
        console.error('‚ùå Webhook signature verification failed:', err.message);
        return res.status(400).json({ error: 'Webhook signature verification failed' });
      }
    }

    switch (stripeEvent.type) {
      case 'checkout.session.completed':
        await handleCheckoutCompleted(stripeEvent.data.object);
        break;

      case 'customer.subscription.created':
      case 'customer.subscription.updated':
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', stripeEvent.type);
        break;

      case 'customer.subscription.deleted':
        await handleSubscriptionCancelled(stripeEvent.data.object);
        break;

      default:
        console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', stripeEvent.type);
    }

    return res.status(200).json({ received: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
    return res.status(500).json({ error: error.message });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è checkout
 */
async function handleCheckoutCompleted(session) {
  try {
    console.log('üéâ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º checkout.session.completed:', session.id);
    
    const {
      customer,
      subscription,
      customer_email,
      amount_total,
      currency,
      client_reference_id
    } = session;

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ client_reference_id
    let userId = client_reference_id;
    
    // –ï—Å–ª–∏ userId –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ email
    if (!userId && customer_email) {
      console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:', customer_email);
      const usersSnapshot = await db.collection('users')
        .where('email', '==', customer_email)
        .limit(1)
        .get();
      
      if (!usersSnapshot.empty) {
        userId = usersSnapshot.docs[0].id;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ email:', userId);
      }
    }

    if (!userId) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω userId –¥–ª—è —Å–µ—Å—Å–∏–∏:', session.id);
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã
    let planId = 'monthly';
    if (amount_total >= 2000) { // 20‚Ç¨ –≤ —Ü–µ–Ω—Ç–∞—Ö
      planId = 'yearly';
    } else if (amount_total >= 500) { // 5‚Ç¨ –≤ —Ü–µ–Ω—Ç–∞—Ö
      planId = 'quarterly';
    }

    console.log('üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–ª–∞–Ω:', planId, '–¥–ª—è —Å—É–º–º—ã:', amount_total);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const now = new Date();
    const expiresAt = new Date(now);

    switch (planId) {
      case 'monthly':
        expiresAt.setMonth(now.getMonth() + 1);
        break;
      case 'quarterly':
        expiresAt.setMonth(now.getMonth() + 3);
        break;
      case 'yearly':
        expiresAt.setFullYear(now.getFullYear() + 1);
        break;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionData = {
      planId,
      status: 'active',
      stripeCustomerId: customer,
      stripeSubscriptionId: subscription,
      stripeSessionId: session.id,
      startedAt: admin.firestore.FieldValue.serverTimestamp(),
      expiresAt: expiresAt.toISOString(),
      amount: amount_total / 100,
      currency,
      customerEmail: customer_email,
      isTest: session.livemode === false,
      createdAt: admin.firestore.FieldValue.serverTimestamp(),
      webhookProcessed: true
    };

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('users').doc(userId).update({
      subscription: subscriptionData,
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    await db.collection('payments').add({
      userId,
      planId,
      stripeSessionId: session.id,
      stripeCustomerId: customer,
      stripeSubscriptionId: subscription,
      amount: amount_total / 100,
      currency,
      status: 'completed',
      customerEmail: customer_email,
      isTest: session.livemode === false,
      webhookProcessed: true,
      createdAt: admin.firestore.FieldValue.serverTimestamp()
    });

    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', userId, planId);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleCheckoutCompleted:', error);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function handleSubscriptionCancelled(subscription) {
  try {
    console.log('‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏:', subscription.id);
    
    const { customer } = subscription;
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const usersSnapshot = await db.collection('users')
      .where('subscription.stripeCustomerId', '==', customer)
      .get();

    for (const userDoc of usersSnapshot.docs) {
      await userDoc.ref.update({
        'subscription.status': 'cancelled',
        'subscription.cancelledAt': admin.firestore.FieldValue.serverTimestamp(),
        updatedAt: admin.firestore.FieldValue.serverTimestamp()
      });
      
      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userDoc.id);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleSubscriptionCancelled:', error);
    throw error;
  }
}
