import { doc, updateDoc, addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { db } from '../config/firebase';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Stripe Webhooks
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç Stripe
 */

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è checkout —Å–µ—Å—Å–∏–∏
 */
export const handleCheckoutSessionCompleted = async (session) => {
    try {
        console.log('üéâ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π checkout:', session.id);

        const { customer, subscription, client_reference_id, customer_email } = session;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ client_reference_id (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏)
        const userId = client_reference_id || customer;

        if (!userId) {
            console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω userId –≤ checkout session');
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã
        let planId = 'monthly';
        const amount = session.amount_total;
        
        if (amount >= 2000) { // 20‚Ç¨ –≤ —Ü–µ–Ω—Ç–∞—Ö
            planId = 'yearly';
        } else if (amount >= 500) { // 5‚Ç¨ –≤ —Ü–µ–Ω—Ç–∞—Ö
            planId = 'quarterly';
        } else {
            planId = 'monthly';
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        const now = new Date();
        const expiresAt = new Date(now);

        switch (planId) {
            case 'monthly':
                expiresAt.setMonth(now.getMonth() + 1);
                break;
            case 'quarterly':
                expiresAt.setMonth(now.getMonth() + 3);
                break;
            case 'yearly':
                expiresAt.setFullYear(now.getFullYear() + 1);
                break;
        }

        const subscriptionData = {
            planId,
            status: 'active',
            stripeCustomerId: customer,
            stripeSubscriptionId: subscription,
            stripeSessionId: session.id,
            startedAt: now.toISOString(),
            expiresAt: expiresAt.toISOString(),
            amount: amount / 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ü–µ–Ω—Ç–æ–≤
            currency: session.currency,
            customerEmail: customer_email,
            isTest: session.livemode === false,
            createdAt: now.toISOString()
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
        const userRef = doc(db, 'users', userId);
        await updateDoc(userRef, {
            subscription: subscriptionData,
            updatedAt: serverTimestamp()
        });

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        const paymentDoc = {
            userId,
            planId,
            stripeSessionId: session.id,
            stripeCustomerId: customer,
            stripeSubscriptionId: subscription,
            amount: amount / 100,
            currency: session.currency,
            status: 'completed',
            customerEmail: customer_email,
            isTest: session.livemode === false,
            createdAt: serverTimestamp(),
            completedAt: serverTimestamp()
        };

        await addDoc(collection(db, 'payments'), paymentDoc);

        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ webhook:', subscriptionData);

        return { success: true, subscription: subscriptionData };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ checkout.session.completed:', error);
        throw error;
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å—á–µ—Ç–∞
 */
export const handleInvoicePaymentSucceeded = async (invoice) => {
    try {
        console.log('üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–∞:', invoice.id);

        const { customer, subscription, customer_email } = invoice;

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ —Ç.–¥.
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

        console.log('‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω:', {
            customer,
            subscription,
            amount: invoice.amount_paid / 100,
            currency: invoice.currency
        });

        return { success: true };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ invoice.payment_succeeded:', error);
        throw error;
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
 */
export const handleSubscriptionDeleted = async (subscription) => {
    try {
        console.log('‚ùå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏:', subscription.id);

        const { customer } = subscription;

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ customer ID –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:', {
            customer,
            subscriptionId: subscription.id
        });

        return { success: true };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ customer.subscription.deleted:', error);
        throw error;
    }
};

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook —Å–æ–±—ã—Ç–∏–π
 */
export const handleStripeWebhook = async (event) => {
    try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ Stripe —Å–æ–±—ã—Ç–∏–µ:', event.type);

        switch (event.type) {
            case 'checkout.session.completed':
                return await handleCheckoutSessionCompleted(event.data.object);

            case 'invoice.payment_succeeded':
                return await handleInvoicePaymentSucceeded(event.data.object);

            case 'customer.subscription.deleted':
                return await handleSubscriptionDeleted(event.data.object);

            case 'customer.subscription.created':
            case 'customer.subscription.updated':
                console.log('‚ÑπÔ∏è –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:', event.type);
                return { success: true, message: '–°–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ' };

            default:
                console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', event.type);
                return { success: true, message: '–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ' };
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
        throw error;
    }
};

/**
 * –°–∏–º—É–ª—è—Ü–∏—è webhook –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const simulateWebhookEvent = async (userId, planId = 'monthly') => {
    try {
        console.log('üß™ –¢–ï–°–¢: –°–∏–º—É–ª–∏—Ä—É–µ–º webhook —Å–æ–±—ã—Ç–∏–µ');

        const mockSession = {
            id: `cs_test_webhook_${Date.now()}`,
            customer: `cus_test_${Date.now()}`,
            subscription: `sub_test_${Date.now()}`,
            client_reference_id: userId,
            customer_email: 'test@example.com',
            amount_total: planId === 'yearly' ? 2000 : planId === 'quarterly' ? 500 : 200,
            currency: 'eur',
            livemode: false
        };

        const result = await handleCheckoutSessionCompleted(mockSession);
        
        console.log('‚úÖ –¢–ï–°–¢: Webhook —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
        return result;

    } catch (error) {
        console.error('‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ webhook:', error);
        throw error;
    }
};
