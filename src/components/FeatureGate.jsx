import {
    Box,
    Card,
    CardContent,
    Typography,
    Button,
    Alert,
    Chip
} from '@mui/material';
import {
    Lock as LockIcon,
    Star as StarIcon,
    Upgrade as UpgradeIcon
} from '@mui/icons-material';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import PropTypes from 'prop-types';
import { useSubscription } from '../context/SubscriptionContext';
import { SUBSCRIPTION_PLANS } from '../services/stripeService';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
 */
const FeatureGate = ({
    feature,
    children,
    fallback = null,
    showUpgrade = true,
    customMessage = null
}) => {
    const {
        hasFeature,
        getRecommendedPlan,
        isActive,
        planInfo
    } = useSubscription();
    const navigate = useNavigate();

    // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    if (hasFeature(feature)) {
        return children;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π fallback, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (fallback) {
        return fallback;
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å upgrade, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!showUpgrade) {
        return null;
    }

    const recommendedPlan = getRecommendedPlan(feature);
    const plan = SUBSCRIPTION_PLANS[recommendedPlan];

    const getFeatureDisplayName = (featureName) => {
        const featureNames = {
            aiRecommendations: '–ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            analytics: '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            nutritionistConsultation: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞',
            workoutPlans: '–ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
            dataExport: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
            unlimitedMealPlans: '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è',
            prioritySupport: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        };
        return featureNames[featureName] || featureName;
    };

    const handleUpgrade = () => {
        navigate('/subscription');
    };

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
        >
            <Card sx={{
                background: 'linear-gradient(135deg, rgba(26, 26, 26, 0.95) 0%, rgba(45, 24, 16, 0.95) 100%)',
                border: '2px solid rgba(255, 152, 0, 0.3)',
                borderRadius: 3,
                textAlign: 'center',
                position: 'relative',
                overflow: 'hidden'
            }}>
                {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω */}
                <Box sx={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    background: 'linear-gradient(45deg, rgba(255, 152, 0, 0.05) 0%, rgba(255, 107, 53, 0.05) 100%)',
                    zIndex: 0
                }} />

                <CardContent sx={{ p: 4, position: 'relative', zIndex: 1 }}>
                    {/* –ò–∫–æ–Ω–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ */}
                    <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
                    >
                        <Box sx={{
                            width: 80,
                            height: 80,
                            borderRadius: '50%',
                            background: 'linear-gradient(45deg, #ff9800, #ff6b35)',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            mx: 'auto',
                            mb: 3,
                            boxShadow: '0 8px 25px rgba(255, 152, 0, 0.3)'
                        }}>
                            <LockIcon sx={{ fontSize: 40, color: 'white' }} />
                        </Box>
                    </motion.div>

                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <Typography
                        variant="h5"
                        sx={{
                            fontWeight: 'bold',
                            color: 'white',
                            mb: 1
                        }}
                    >
                        –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è
                    </Typography>

                    {/* –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ */}
                    <Typography
                        variant="body1"
                        sx={{
                            color: 'rgba(255,255,255,0.8)',
                            mb: 2
                        }}
                    >
                        {customMessage || `–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ &ldquo;${getFeatureDisplayName(feature)}&rdquo; –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞`}
                    </Typography>

                    {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–ª–∞–Ω */}
                    {plan && (
                        <Box sx={{
                            p: 2,
                            backgroundColor: 'rgba(255, 152, 0, 0.1)',
                            borderRadius: 2,
                            border: '1px solid rgba(255, 152, 0, 0.3)',
                            mb: 3
                        }}>
                            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mb: 1 }}>
                                <StarIcon sx={{ color: '#ff9800', mr: 1 }} />
                                <Typography variant="h6" sx={{ color: '#ff9800', fontWeight: 'bold' }}>
                                    {plan.name}
                                </Typography>
                            </Box>

                            <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.7)', mb: 2 }}>
                                {plan.description}
                            </Typography>

                            <Chip
                                label={`${plan.price} ‚ÇΩ/–º–µ—Å—è—Ü`}
                                sx={{
                                    backgroundColor: 'rgba(255, 152, 0, 0.2)',
                                    color: '#ff9800',
                                    fontWeight: 'bold'
                                }}
                            />
                        </Box>
                    )}

                    {/* –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω */}
                    {isActive && (
                        <Alert
                            severity="info"
                            sx={{
                                mb: 3,
                                backgroundColor: 'rgba(33, 150, 243, 0.1)',
                                border: '1px solid rgba(33, 150, 243, 0.3)',
                                '& .MuiAlert-message': { color: '#2196f3' }
                            }}
                        >
                            –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω –ø–ª–∞–Ω "{planInfo.name}". –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–ª–∞–Ω "{plan?.name}".
                        </Alert>
                    )}

                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
                        <Button
                            variant="contained"
                            startIcon={<UpgradeIcon />}
                            onClick={handleUpgrade}
                            sx={{
                                background: 'linear-gradient(45deg, #ff9800, #ff6b35)',
                                px: 4,
                                py: 1.5,
                                borderRadius: 2,
                                fontWeight: 'bold',
                                '&:hover': {
                                    background: 'linear-gradient(45deg, #f57c00, #e55a2b)',
                                    transform: 'translateY(-2px)',
                                    boxShadow: '0 8px 25px rgba(255, 152, 0, 0.4)'
                                }
                            }}
                        >
                            {isActive ? '–û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω' : '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø'}
                        </Button>
                    </Box>

                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <Typography
                        variant="caption"
                        sx={{
                            color: 'rgba(255,255,255,0.5)',
                            mt: 2,
                            display: 'block'
                        }}
                    >
                        üí° –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è ‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π
                    </Typography>
                </CardContent>
            </Card>
        </motion.div>
    );
};

FeatureGate.propTypes = {
    feature: PropTypes.string.isRequired,
    children: PropTypes.node.isRequired,
    fallback: PropTypes.node,
    showUpgrade: PropTypes.bool,
    customMessage: PropTypes.string
};

export default FeatureGate;
