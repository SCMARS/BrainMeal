/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Stripe Checkout Sessions —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö
 */

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ Checkout Session —á–µ—Ä–µ–∑ Firebase Function (–±—É–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
 */
export const createCheckoutSession = async (userId, planId, userEmail) => {
    try {
        console.log('üîÑ –°–æ–∑–¥–∞–µ–º Checkout Session:', { userId, planId, userEmail });

        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Firebase Function
        // const createCheckout = httpsCallable(functions, 'createCheckoutSession');
        // const result = await createCheckout({ planId, userId, userEmail });
        // return result.data;

        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Payment Link —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const baseUrl = 'https://buy.stripe.com/test_00wfZiclpclFesV8qYeIw00';
        
        const params = new URLSearchParams({
            'client_reference_id': userId,
            'prefilled_email': userEmail || '',
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –µ—Å–ª–∏ Stripe –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
        });

        return {
            success: true,
            checkoutUrl: `${baseUrl}?${params.toString()}`,
            metadata: {
                userId,
                planId,
                userEmail
            }
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Checkout Session:', error);
        throw error;
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ redirect –∏–∑ Stripe)
 */
export const handleSuccessfulPayment = async (sessionId, userId) => {
    try {
        console.log('üéâ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂:', { sessionId, userId });

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ Firebase Function –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏

        return {
            success: true,
            message: '–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ',
            sessionId,
            userId
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
        throw error;
    }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Checkout Session
 */
export const getCheckoutSessionInfo = async (sessionId) => {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Checkout Session:', sessionId);

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ backend
        // –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Stripe API

        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
        return {
            id: sessionId,
            status: 'complete',
            customer_email: 'user@example.com',
            client_reference_id: 'user_123',
            amount_total: 200, // 2‚Ç¨ –≤ —Ü–µ–Ω—Ç–∞—Ö
            currency: 'eur',
            metadata: {
                planId: 'monthly',
                userId: 'user_123'
            }
        };

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏:', error);
        throw error;
    }
};
